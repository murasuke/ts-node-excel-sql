{
  "version": "0.2.0",
  "configurations": [    
    {
      "name": "エディタで開いている(アクティブな).tsファイルをデバッグ",
      "type":  "pwa-node", // 利用するデバッガの種類をVSCodeに伝える。"node"でも良いが、"pwa-node"の方が新しいデバッガのためこちらを利用(progressive web apps とは関係ない)
      "request": "launch", // デバッガ起動時に、対象プログラム("program")を起動する
      "runtimeArgs": ["--nolazy", "-r", "ts-node/register"], // ts-nodeを読み込みます(nolazyは無くても動きます。V8エンジンにスクリプト解析を延滞させないためのオプション(指定しないとブレークポイントスキップする可能性があるため))
      "args": ["${file}", "--transpile-only"], // デバッグを開始するファイルを指定する。「${file}」はアクティブなファイルのフルパス(開いているファイルをデバッグする)
      "skipFiles": ["<node_internals>/**", "node_modules/**"],
      "env": {
        "TS_NODE_PROJECT": "${workspaceFolder}/tsconfig.json"
      }
    },
    {
      "type": "pwa-node", // 利用するデバッガの種類
      "request": "attach", // 起動中のプログラム(node)にアタッチしてデバッグする
      "name": "Attach node program",
      "processId": "${command:PickProcess}", // デバッグ開始時、プロセスのピッカーを表示(デバッグ対象のnodeプロセスを選択する)
    },
    {
      "name": "Debug Jest Tests",
      "type": "node",
      "request": "launch",
      "runtimeArgs": [
        "--inspect-brk",
        "${workspaceRoot}/node_modules/jest/bin/jest.js",
        "--runInBand"
      ],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "port": 9229
    }
  ]
}